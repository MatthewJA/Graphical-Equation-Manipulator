// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    var Constant;
    return Constant = (function() {
      function Constant(numerator, denominator, roots) {
        this.numerator = numerator;
        this.denominator = denominator != null ? denominator : 1;
        if (roots == null) {
          roots = null;
        }
        this.isTerm = true;
        this.isConstant = true;
        if (roots != null) {
          this.roots = roots;
        } else {
          this.roots = {};
        }
      }

      Constant.prototype.pow = function(power) {
        var den, i, num, _i, _ref, _ref1, _ref2;
        if (power < 0) {
          power *= -1;
          _ref = [this.denominator, this.numerator], this.numerator = _ref[0], this.denominator = _ref[1];
        }
        _ref1 = this.fractionSimplify(power), num = _ref1[0], den = _ref1[1];
        console.log(num, den);
        if (den !== 1) {
          for (i = _i = 2; _i <= 9; i = ++_i) {
            if ((-0.000001 <= (_ref2 = power - (1 / i)) && _ref2 < 0.000001)) {
              power *= i;
              den = i;
              if (den in this.roots) {
                this.roots[den] += 1;
              } else {
                this.roots[den] = 1;
              }
              break;
            }
          }
        }
        console.log("ROOTS", this.roots);
        this.numerator = Math.pow(this.numerator, power);
        return this.denominator = Math.pow(this.denominator, power);
      };

      Constant.prototype.multiply = function(constant) {
        var a, b, i, root, roots, _i, _j, _ref, _ref1;
        a = constant.copy();
        b = this.copy();
        for (root in b.roots) {
          if (b.roots[root] > 0) {
            for (i = _i = 1, _ref = b.roots[root]; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
              a.pow(root);
            }
          }
        }
        for (root in a.roots) {
          if (a.roots[root] > 0) {
            for (i = _j = 1, _ref1 = a.roots[root]; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
              b.pow(root);
            }
          }
        }
        roots = {};
        for (root in a.roots) {
          if (root in roots) {
            roots[root] += a.roots[root];
          } else {
            roots[root] = a.roots[root];
          }
        }
        for (root in b.roots) {
          if (root in roots) {
            roots[root] += b.roots[root];
          } else {
            roots[root] = b.roots[root];
          }
        }
        return new Constant(this.numerator * constant.numerator, this.denominator * constant.denominator, roots);
      };

      Constant.prototype.simplify = function() {
        var _ref;
        return _ref = this.fractionSimplify(this.numerator, this.denominator), this.numerator = _ref[0], this.denominator = _ref[1], _ref;
      };

      Constant.prototype.fractionSimplify = function(num, den) {
        var a, b, gcd, _ref;
        if (den == null) {
          den = 1;
        }
        a = num;
        b = den;
        while (b !== 0) {
          _ref = [b, a % b], a = _ref[0], b = _ref[1];
        }
        gcd = a;
        num /= gcd;
        den /= gcd;
        return [num, den];
      };

      Constant.prototype.evaluate = function() {
        var root, val;
        val = this.numerator / this.denominator;
        for (root in this.roots) {
          val = Math.pow(val, 1 / root);
        }
        return val;
      };

      Constant.prototype.copy = function() {
        return new Constant(this.numerator, this.denominator, this.roots);
      };

      Constant.prototype.toMathML = function() {
        var root, str;
        if (this.denominator === 1) {
          str = "<mn>" + this.numerator + "</mn>";
        } else {
          str = "<mfrac><mrow><mn>" + this.numerator + "</mn></mrow><mrow><mn>" + this.denominator + "</mn></mrow></mfrac>";
        }
        for (root in this.roots) {
          if (this.roots[root] > 0) {
            str = "<mroot><mrow>" + str + "</mrow><mn>" + root + "</mn></mroot>";
          }
        }
        return str;
      };

      Constant.prototype.toString = function() {
        var root, str;
        if (this.denominator === 1) {
          str = "" + this.numerator;
        } else {
          str = "" + this.numerator + "/" + this.denominator;
        }
        for (root in this.roots) {
          if (this.roots[root] > 0) {
            str = "(" + str + ")**(1/" + (Math.pow(root, this.roots[root])) + ")";
          }
        }
        return str;
      };

      return Constant;

    })();
  });

}).call(this);
